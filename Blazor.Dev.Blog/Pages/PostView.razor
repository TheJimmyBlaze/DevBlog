@using Models;
@using Services;
@inject PostService PostService;
@inject CategoryService CategoryService;

@page "/post/{PostNaturalID}"

    <div class="container">
        @if (post == null || category == null)
        {
            <div class="row bg-dark p-3 rounded my-3 w-50 mx-auto">
                <div class="container bg-secondary rounded my-auto py-3">
                    <h6 class="text">Loading Post Details...</h6>
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width:100%"></div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row mx-auto my-3 mb-1 bg-dark rounded py-3">
                <div class="col-3 col-md-2 col-xl-1 h-auto">
                    <div class="rounded shadow h-100" style="background-image:url(@SwitchUrl(CategoryService.GetImagePath(category))); background-size: cover; background-position: center;" />
                </div>

                <div class="col-4 col-md-6 col-lg-7 col-xl-8 my-auto">
                    <h3>@category.Name</h3>
                </div>

                <div class="col-3 col-md-2 h-auto w-auto">
                    <button type="button" class="btn btn-primary h-100">
                        Browse Category
                    </button>
                </div>

                <div class="col-2 col-lg-1 h-auto">
                    <a href="@category.Github" target="_blank" class="btn btn-success h-100 d-flex justify-content-center">
                        <i class="h3 my-auto fab fa-github-square"></i>
                    </a>
                </div>
            </div>

            <div class="row mx-auto p-3 bg-dark rounded-top blog-geometric-background">
                <div class="container d-flex">
                    @foreach (string raw in post.Tags)
                    {
                        Tuple<string, string> tag = PostService.CreateTag(raw);
                        <a href="#" class="badge badge-@tag.Item1 ml-1">@tag.Item2</a>
                    }
                </div>

                <div class="container pt-2">
                    <h3>@post.Title</h3>
                </div>

                <div class="container pb-2">
                    <h6>@post.CreationDateUTC.ToString(@"dd/MM/yy")</h6>
                </div>
            </div>

            <div class="row mx-auto p-3 mb-6 rounded-bottom bg-dark">
                @((MarkupString)postBody)
            </div>
        }
    </div>

@code {
    [Parameter]
    public string PostNaturalID { get; set; }

    private Post post;
    private string postBody;
    private Category category;

    private string SwitchUrl(string url)
    {
        if (string.IsNullOrEmpty(url))
            return null;
        return url.Replace('\\', '/');
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1200); //Look busy

            post = await PostService.GetPost(PostNaturalID);
            postBody = await PostService.GetPostBodyAsync(post);
            category = await CategoryService.GetCategoryForPost(post);

            StateHasChanged();
        }
    }
}
