@using System.Threading;
@using Models;
@using Services;
@inject ProfileService ProfileService;

<div class="card bg-dark shadow-sm">
    @if (profile == null)
    {
        <div>Loading</div>
    }
    else
    { 
        <div class="card-img-top d-flex align-items-center justify-content-center blog-profile-background">
            <div class="m-2 m-xl-3 p-2 p-xl-3 bg-dark shadow rounded-circle">
                <img src="@profile?.GetImagePath()" class="shadow rounded-circle xl" />
            </div>
        </div>
        <div class="card-body d-flex flex-column">
            <h3 class="card-title mb-0">@profile?.Name</h3>
            <h6 class="text-muted">@profile?.Location</h6>

            <p class="card-text my-auto py-3">@profile?.Blurb</p>

            <div class="btn-group mt-auto">
                <a href="@profile?.GetMailToAddress()" class="btn btn-primary"><i class="h3 my-auto fas fa-envelope-square"></i></a>
                <a href="@profile?.Github" target="_blank" class="btn btn-primary"><i class="h3 my-auto fab fa-github-square"></i></a>
                <a href="@profile?.LinkedIn" target="_blank" class="btn btn-primary"><i class="h3 my-auto fab fa-linkedin"></i></a>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string ProfileJsonPath { get; set; }

    private Profile profile;

    protected override async Task OnInitializedAsync() =>
        profile = await ProfileService.GetProfileAsync(ProfileJsonPath);
}
